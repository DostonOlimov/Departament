<?php

namespace common\models\control;

use common\models\ProgramType;
use common\models\Countries;
use Yii;

/**
 * This is the model class for table "control_primary_product".
 *
 * @property int $id
 * @property int $control_primary_data_id
 * @property string|null $product_type
 * @property string|null $nd
 * @property string|null $nd_type
 * @property string|null $number_blank
 * @property string|null $number_reestr
 * @property int|null $date_from
 * @property int|null $date_to
 *
 * @property PrimaryData $controlPrimaryData
 */
class PrimaryProduct extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    const   MEASURE1 = 1;
    const   MEASURE2 = 2;
    const   MEASURE3 = 3;
    const   MEASURE4 = 4;
    const   MEASURE5 = 5;

    const  PURPOSE1 = 1;
    const  PURPOSE2 = 2;
    const  PURPOSE3 = 3;


    public static function tableName()
    {
        return 'control_primary_product';
    }

    public function rules()
    {
        return [
            [['control_primary_data_id'], 'required'],
            [['control_primary_data_id', 'product_type_id','product_type_parent_id','group_id','class_id','position_id','under_position_id','product_measure','select_of_exsamle_purpose','made_country'], 'integer'],
            [['residue_quantity','residue_amount','potency','year_amount','year_quantity', 'product_name'], 'string', 'max' => 255],
            [['control_primary_data_id'], 'exist', 'skipOnError' => true, 'targetClass' => PrimaryData::className(), 'targetAttribute' => ['control_primary_data_id' => 'id']],
            [['product_type_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['product_type_id' => 'id']],
            [['product_type_parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['product_type_parent_id' => 'parent_id']],
            [['group_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['group_id' => 'group_id']],
            [['class_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['class_id' => 'class_id']],
            [['potion_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['potion_id' => 'parent_id']],
            [['under_potion_id'], 'exist', 'skipOnError' => true, 'targetClass' => ProductType::className(), 'targetAttribute' => ['under_potion_id' => 'under_parent_id']],
            [['made_country'], 'exist', 'skipOnError' => true, 'targetClass' => Countries::className(), 'targetAttribute' => ['made_country' => 'id']]

        ];
    }

    public function beforeSave($insert)
    {
        if (!parent::beforeSave($insert)) {
            return false;
        }

        $this->date_from = strtotime($this->date_from);
        $this->date_to = strtotime($this->date_to);

        return true;
    }

    public static function getMeasure($type = null)
    {
        $arr = [

            self::MEASURE3 => 'Uzunlik(m)',
            self::MEASURE2 => 'Og\'irlik(kg)',
            self::MEASURE1 => 'Dona',
            self::MEASURE4 => 'Yuza(m2)',
            self::MEASURE5 => 'Hajm(m3)',
        ];

        if ($type === null) {
            return $arr;
        }

        return $arr[$type];
    }

    public static function getPurpose($type = null)
    {
        $arr = [

            self::PURPOSE1 => 'Tashqi ko\'rinish va markirovkasi bo\'yicha tekshiruv',
            self::PURPOSE2 => 'Sinov laboratoriyasida tekshirish',
            self::PURPOSE3 => 'Hujjat tahlili',
       ];

        if ($type === null) {
            return $arr;
        }

        return $arr[$type];
    }

    public function afterFind()
    {
        $this->date_from = $this->date_from ? Yii::$app->formatter->asDate($this->date_from, 'M/dd/yyy') : '';
        $this->date_to = $this->date_to ? Yii::$app->formatter->asDate($this->date_to, 'M/dd/yyy') : '';

        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'control_primary_data_id' => 'Control Primary Data ID',
            'product_type_id' => 'Mahsulot turi',
            'product_name' => 'Mahsulot nomi',
            'nd' => 'Mahsulot normativ hujjatlari',
            'nd_type' => 'Normativ hujjat toifalari',
            'number_blank' => 'Blank raqami',
            'number_reestr' => 'Reesstr raqami',
            'date_from' => 'Berilgan sana',
            'date_to' => 'Amal qilish muddati',
        ];
    }

    /**
     * Gets query for [[ControlPrimaryData]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPrimaryData()
    {
        return $this->hasOne(PrimaryData::className(), ['id' => 'control_primary_data_id']);
    }
}
